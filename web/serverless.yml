frameworkVersion: '>=1.0.0 <2.0.0'

service: ${self:custom.helloRetail.name}-website

plugins:
  - web-app-build-plugin
  - serverless-s3-sync
custom:
  # AWS ARN for the S3 bucket used to host the site.
  bucketArn:
    Fn::Join: # e.g. arn:aws:s3:::stage.hello-retail.net/*
      - ''
      - - 'arn:aws:s3:::'
        - Ref: HelloRetailWebBucket
        - '/*'
  edgeZoneID: Z2FDTNDATAQYW2
  s3Sync:
  - bucketName: ${self:custom.dnsHostName}
    localDir: app

  oAuthClientId: ${self:custom.private.loginWithAmazonClientId}
  oAuthAppId: ${self:custom.private.loginWithAmazonAppId}

  # Domain name for CloudFront distribution.
  cloudFrontDomainName:
    Fn::GetAtt:
      - HelloRetailWebDistribution
      - DomainName

  # Hosted Zone ID for all of CloudFormation.
  cloudFrontHostedZoneId: Z111O0EMRSKFGG

  # Certificate ID from Certification Manager for the site e.g. 93b35aeb-575a-48b8-b7bb-6c3e8ac0c55d
  domainCertId: 93b35aeb-575a-48b8-b7bb-6c3e8ac0c55d

  # Public domain for the site e.g. hello-retail.net
  domainName: ${self:custom.private.domainName}

  # Fully Qualified Domain Name for the hosted website.
  dnsHostName: ${self:custom.domainName}

  # FQDN for direct access to S3 bucket website.
  originDomainName:
    Fn::Join: # e.g. hello-retail.net.s3.amazonaws.com
      - ''
      - - ${self:custom.dnsHostName}
        - '.s3.amazonaws.com'

  # Identifier used for the S3 origin in CloudFront.
  originId:
    Fn::Join: # e.g. S3-hello-retail.net or S3-stage.hello-retail.net
      - ''
      - - 'S3-'
        - ${self:custom.domainName}

  # Import secrets.
  private: ${file(./private.yml)}

  helloRetail: ${file(./helloRetail.yml)}
  retailStreamVersion: 1
  retailStream: ${file(./retail-stream.yml)}

  eventWriterApiVersion: 1
  eventWriterApi: ${file(../event-writer/serverless.yml)}
  productCatalogBuilderVersion: 1
  productCatalogBuilder: ${file(../product-catalog/builder/serverless.yml)}
  cartBuilder: ${file(../cart/builder/serverless.yml)}

  s3Bucket:
    Fn::Join: # e.g. s3://hello-retail.net/
      - ''
      - - 's3://'
        - Ref: HelloRetailWebBucket
        - '/'

  # SSL Certificate to use for Cloud Front.
  sslCert: arn:aws:acm:${self:custom.private.region}:${self:custom.private.accountId}:certificate/${self:custom.domainCertId}

  # Stage name for deployment. Use 'prod' to deploy to production.
  stage: ${opt:stage, self:provider.stage, self:custom.private.stage}

  # TODO: Reference values from dependencies above when possible
  webAppBuild:
    configPath: ./config.js
    configValues:
      WebAppName: Hello Retail
      Stage: ${self:custom.stage}
      AuthClientId: ${self:custom.oAuthClientId}
      AWSRegion: ${self:custom.private.region}
      SessionName: ${self:custom.helloRetail.name}-website-${self:custom.stage}
      # TODO: Create this role as part of this stack
      WebAppRole: arn:aws:iam::${self:custom.private.accountId}:role/${self:custom.stage}HelloRetailWebIdentity
      ProductCatalogTableName:
        Fn::ImportValue: ${self:custom.productCatalogBuilder.custom.exportProductCatalogTableName}
      ProductCategoryTableName:
        Fn::ImportValue: ${self:custom.productCatalogBuilder.custom.exportProductCategoryTableName}
      CartTableName: #TODO DIDNT WORK
        Fn::ImportValue: ${self:custom.cartBuilder.custom.exportCartTableName}
      EventWriterApi:
        Fn::ImportValue: ${self:custom.eventWriterApi.custom.exportEventWriterRestApi}
    webpackPath: ./webpack.config.js

  webApp: ${self:} # externally, use `${file(~/web/serverless.yml)}`, replacing the `~` therein with the appropriate relative reference [e.g. '..' or '../..']
  exportWebApplicationIdentityArn: ${self:custom.webApp.service}:${self:custom.stage}:WebApplicationIdentityArn
  exportWebApplicationBucketName: ${self:custom.webApp.service}:${self:custom.stage}:WebApplicationBucketName

provider:
  name: aws
  deploymentBucket: com.${self:custom.private.company}.${self:custom.private.team}.serverless.${self:provider.region}
  profile: ${self:custom.private.profile}
  region: ${self:custom.private.region}

resources:
  Conditions:
     ProductionStage:
       Fn::Equals:
         - ${self:custom.stage}
         - prod

  Resources:

    # TODO: Web App Role to include policy allowing it to assume all necessary roles

    # ===================== IAM ====================

    WebApplicationIdentity:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.stage}HelloRetailWebIdentity
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: www.amazon.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  www.amazon.com:app_id: ${self:custom.oAuthAppId}
        ManagedPolicyArns:
          - ${self:custom.private.teamPolicy}
        Policies:
          - PolicyName: ReadFromProductCatalog
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -  Effect: Allow
                   Action:
                     - 'dynamodb:Scan'
                   Resource:
                    Fn::ImportValue: ${self:custom.productCatalogBuilder.custom.exportProductCategoryTableArn}
                -  Effect: Allow
                   Action:
                     - 'dynamodb:GetItem'
                     - 'dynamodb:BatchGetItem'
                     - 'dynamodb:Scan'
                   Resource:
                    Fn::ImportValue: ${self:custom.productCatalogBuilder.custom.exportProductCatalogTableArn}
                -  Effect: Allow
                   Action:
                     - 'dynamodb:Query'
                     - 'dynamodb:Scan'
                   Resource:
                    Fn::ImportValue: ${self:custom.productCatalogBuilder.custom.exportProductCatalogTableCategoryIndexArn}
          - PolicyName: ReadFromCart
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -  Effect: Allow
                   Action:
                     - 'dynamodb:Scan'
                     - 'dynamodb:GetItem'
                     - 'dynamodb:BatchGetItem'
                     - 'dynamodb:Query'
                   Resource:
                    Fn::ImportValue: ${self:custom.cartBuilder.custom.exportCartTableArn}

    # ===================== S3 =====================

    HelloRetailWebBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.dnsHostName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    HelloRetailWebBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: HelloRetailWebBucket
        PolicyDocument:
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource: ${self:custom.bucketArn}
              Principal: '*'
            - Action:
                - s3:PutObject
              Effect: Allow
              Resource: ${self:custom.bucketArn}
              Principal:
                AWS:
                  - 'arn:aws:iam::${self:custom.private.accountId}:role/${self:custom.stage}HelloRetailWebIdentity'
      DependsOn:
        - HelloRetailWebBucket

    # ================ CloudFront ==================

    HelloRetailWebDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - Id: ${self:custom.originId}
              DomainName: ${self:custom.originDomainName}
              S3OriginConfig:
                OriginAccessIdentity: ''
          Enabled: true
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /error.html
          DefaultRootObject: index.html
          Aliases:
          - '${self:custom.dnsHostName}, www.${self:custom.dnsHostName}'
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            TargetOriginId: ${self:custom.originId}
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            SslSupportMethod: sni-only
            AcmCertificateArn: ${self:custom.sslCert}
      DependsOn:
        - HelloRetailWebBucket

    # ================= Route 53 ===================

    HelloRetailWebRecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: ${self:custom.domainName}.
        RecordSets:
        - Name: ${self:custom.dnsHostName}
          Type: 'A'
          AliasTarget:
            DNSName: ${self:custom.cloudFrontDomainName}
            HostedZoneId: ${self:custom.edgeZoneID}
        - Name: ${self:custom.dnsHostName}
          Type: 'AAAA'
          AliasTarget:
            DNSName: ${self:custom.cloudFrontDomainName}
            HostedZoneId: ${self:custom.edgeZoneID}
      DependsOn:
        - HelloRetailWebDistribution

  # ================= Outputs ===================

  Outputs:
    WebApplicationIdentityArn:
      Description: The Role ARN for the Web Application identity
      Value:
        Fn::GetAtt: [ WebApplicationIdentity, Arn ]
      Export:
        Name: ${self:custom.exportWebApplicationIdentityArn}
    WebApplicationBucketName:
      Description: The S3 Bucket ARN used to host Web Application
      Value:
        Ref: HelloRetailWebBucket
      Export:
        Name: ${self:custom.exportWebApplicationBucketName}
